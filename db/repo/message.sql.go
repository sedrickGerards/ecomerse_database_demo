// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: message.sql

package repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomer = `-- name: CreateCustomer :many
INSERT INTO "customer" (customer_name, contact)
VALUES ($1, $2)
RETURNING id, customer_name, contact, created_at
`

type CreateCustomerParams struct {
	CustomerName string `json:"customer_name"`
	Contact      string `json:"contact"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) ([]Customer, error) {
	rows, err := q.db.Query(ctx, createCustomer, arg.CustomerName, arg.Contact)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.CustomerName,
			&i.Contact,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createOrders = `-- name: CreateOrders :one
INSERT INTO "orders" (customer_id, product_id, order_status, total_amount)
VALUES ($1, $2, 'PENDING', $3)
RETURNING id, customer_id, product_id, order_status, total_amount, created_at
`

type CreateOrdersParams struct {
	CustomerID  string         `json:"customer_id"`
	ProductID   string         `json:"product_id"`
	TotalAmount pgtype.Numeric `json:"total_amount"`
}

func (q *Queries) CreateOrders(ctx context.Context, arg CreateOrdersParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrders, arg.CustomerID, arg.ProductID, arg.TotalAmount)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.ProductID,
		&i.OrderStatus,
		&i.TotalAmount,
		&i.CreatedAt,
	)
	return i, err
}

const createProduct = `-- name: CreateProduct :many
INSERT INTO "product" (product_name, price)
VALUES ($1, $2)
RETURNING id, product_name, price, created_at
`

type CreateProductParams struct {
	ProductName string         `json:"product_name"`
	Price       pgtype.Numeric `json:"price"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, createProduct, arg.ProductName, arg.Price)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.ProductName,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustomerByID = `-- name: GetCustomerByID :one
SELECT id, customer_name, contact, created_at FROM "customer"
WHERE id = $1
`

func (q *Queries) GetCustomerByID(ctx context.Context, id string) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByID, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.CustomerName,
		&i.Contact,
		&i.CreatedAt,
	)
	return i, err
}

const getProductByID = `-- name: GetProductByID :many
SELECT id, product_name, price, created_at FROM product
WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id string) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.ProductName,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrdersByID = `-- name: UpdateOrdersByID :one
UPDATE "orders" 
SET id = $1, order_status = $2
RETURNING id, customer_id, product_id, order_status, total_amount, created_at
`

type UpdateOrdersByIDParams struct {
	ID          string `json:"id"`
	OrderStatus string `json:"order_status"`
}

func (q *Queries) UpdateOrdersByID(ctx context.Context, arg UpdateOrdersByIDParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrdersByID, arg.ID, arg.OrderStatus)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.ProductID,
		&i.OrderStatus,
		&i.TotalAmount,
		&i.CreatedAt,
	)
	return i, err
}
